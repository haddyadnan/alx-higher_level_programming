The ``lazy_matrix_mul`` module
==========================

Using ``lazy_matrix_mul``
---------------------

This is a text file in reStructuredText format.
First import ``lazy_matrix_mul`` from the ``lazy_matrix_mul`` module:

    >>> lazy_matrix_mul = __import__("101-lazy_matrix_mul").lazy_matrix_mul

Now use it:

    >>> lazy_matrix_mul([[1, 2, 3], [4, 5, 6]], [[7, 8], [9, 10], [11, 12]])
    array([[ 58,  64],
           [139, 154]])

   >>> lazy_matrix_mul([[1, 2, 3], [4, 5, 6]], [[7, 8], [9, 10], [11, 12]])
    [[58, 64], [139, 154]]

    >>> lazy_matrix_mul([[], []], [[]])
    Traceback (most recent call last):
    ...
    ValueError: m_a can't be empty

    >>> lazy_matrix_mul([["a"], [1]], [[0]])
    Traceback (most recent call last):
    ...
    TypeError: m_a should contain only integers or floats

    >>> lazy_matrix_mul([[1,"2"], [2,4]], [[]])
    Traceback (most recent call last):
    ...
    ValueError: m_b can't be empty

    >>> lazy_matrix_mul([[1,2], [3,4]], [[]])
    Traceback (most recent call last):
    ...
    ValueError: m_b can't be empty

    >>> lazy_matrix_mul("lazy_matrix_mul", [[]])
    Traceback (most recent call last):
    ...
    TypeError: m_a must be a list

    >>> lazy_matrix_mul([[1,2], [3,4]], [["lazy_matrix_mul"]])
    Traceback (most recent call last):
    ...
    TypeError: m_b should contain only intergers or floats

    >>> lazy_matrix_mul([[1,2,3], [4,5]], [[6,7],[8,9]])
    Traceback (most recent call last):
    ...
    TypeError: each row of m_a must be of the same size

    >>> lazy_matrix_mul([[1,2], [3,4], [6,7]], [[5,8], [9,10], [0,1]])
    Traceback (most recent call last):
    ...
    ValueError: m_a and m_b can't be multiplied
